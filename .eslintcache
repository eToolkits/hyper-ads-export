[{"D:\\Monster\\hyper-ads-export\\src\\Theme\\index.js":"1","D:\\Monster\\hyper-ads-export\\src\\pages\\EditGame\\index.jsx":"2","D:\\Monster\\hyper-ads-export\\src\\components\\NavigationBar\\styles.js":"3","D:\\Monster\\hyper-ads-export\\src\\container\\Authentication\\index.jsx":"4","D:\\Monster\\hyper-ads-export\\src\\components\\SaveTo\\styles.js":"5","D:\\Monster\\hyper-ads-export\\src\\Router\\PrivateRouter\\index.jsx":"6","D:\\Monster\\hyper-ads-export\\src\\pages\\EditGame\\ChangeAssets\\index.jsx":"7","D:\\Monster\\hyper-ads-export\\src\\container\\ChangeSounds\\index.jsx":"8","D:\\Monster\\hyper-ads-export\\src\\services\\firebaseConfig.js":"9","D:\\Monster\\hyper-ads-export\\src\\pages\\EditGame\\ChangeMap\\index.jsx":"10","D:\\Monster\\hyper-ads-export\\src\\pages\\EditGame\\SelectIdea\\index.jsx":"11","D:\\Monster\\hyper-ads-export\\src\\hook\\useChangeMap.jsx":"12","D:\\Monster\\hyper-ads-export\\src\\components\\GameItem\\index.jsx":"13","D:\\Monster\\hyper-ads-export\\src\\container\\Authentication\\styles.js":"14","D:\\Monster\\hyper-ads-export\\src\\components\\NavigationBar\\index.jsx":"15","D:\\Monster\\hyper-ads-export\\src\\Router\\PublicRouter\\index.jsx":"16","D:\\Monster\\hyper-ads-export\\src\\container\\ChangeMap\\index.jsx":"17","D:\\Monster\\hyper-ads-export\\src\\Router\\index.jsx":"18","D:\\Monster\\hyper-ads-export\\src\\pages\\Home\\index.jsx":"19","D:\\Monster\\hyper-ads-export\\src\\reducer\\index.js":"20","D:\\Monster\\hyper-ads-export\\src\\constant\\index.js":"21","D:\\Monster\\hyper-ads-export\\src\\components\\SaveTo\\index.jsx":"22","D:\\Monster\\hyper-ads-export\\src\\pages\\Export\\index.jsx":"23","D:\\Monster\\hyper-ads-export\\src\\container\\Export\\index.jsx":"24"},{"size":310,"mtime":1640788247475,"results":"25","hashOfConfig":"26"},{"size":1800,"mtime":1641452207642,"results":"27","hashOfConfig":"26"},{"size":1873,"mtime":1641792560826,"results":"28","hashOfConfig":"26"},{"size":1759,"mtime":1641827594561,"results":"29","hashOfConfig":"26"},{"size":525,"mtime":1640788247484,"results":"30","hashOfConfig":"26"},{"size":2623,"mtime":1641792560771,"results":"31","hashOfConfig":"26"},{"size":283,"mtime":1641451178518,"results":"32","hashOfConfig":"26"},{"size":6803,"mtime":1641451178506,"results":"33","hashOfConfig":"26"},{"size":916,"mtime":1640788247499,"results":"34","hashOfConfig":"26"},{"size":260,"mtime":1640835912573,"results":"35","hashOfConfig":"26"},{"size":6019,"mtime":1640788247493,"results":"36","hashOfConfig":"26"},{"size":837,"mtime":1641451178508,"results":"37","hashOfConfig":"26"},{"size":8427,"mtime":1641451178504,"results":"38","hashOfConfig":"26"},{"size":1035,"mtime":1641792560836,"results":"39","hashOfConfig":"26"},{"size":4310,"mtime":1641825436824,"results":"40","hashOfConfig":"26"},{"size":330,"mtime":1641792560785,"results":"41","hashOfConfig":"26"},{"size":5448,"mtime":1640845233512,"results":"42","hashOfConfig":"26"},{"size":447,"mtime":1641825363520,"results":"43","hashOfConfig":"26"},{"size":9295,"mtime":1641825351161,"results":"44","hashOfConfig":"26"},{"size":285,"mtime":1641792560839,"results":"45","hashOfConfig":"26"},{"size":520,"mtime":1641792560827,"results":"46","hashOfConfig":"26"},{"size":2476,"mtime":1640788247483,"results":"47","hashOfConfig":"26"},{"size":212,"mtime":1640788247495,"results":"48","hashOfConfig":"26"},{"size":3245,"mtime":1641451178507,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"yl1rvt",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"63"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"79"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"69"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Monster\\hyper-ads-export\\src\\Theme\\index.js",[],["111","112"],"D:\\Monster\\hyper-ads-export\\src\\pages\\EditGame\\index.jsx",[],"D:\\Monster\\hyper-ads-export\\src\\components\\NavigationBar\\styles.js",[],"D:\\Monster\\hyper-ads-export\\src\\container\\Authentication\\index.jsx",["113"],"D:\\Monster\\hyper-ads-export\\src\\components\\SaveTo\\styles.js",[],"D:\\Monster\\hyper-ads-export\\src\\Router\\PrivateRouter\\index.jsx",[],["114","115"],"D:\\Monster\\hyper-ads-export\\src\\pages\\EditGame\\ChangeAssets\\index.jsx",[],"D:\\Monster\\hyper-ads-export\\src\\container\\ChangeSounds\\index.jsx",["116","117","118"],"import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport {\r\n  Button,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  Box,\r\n  Flex,\r\n  useToast,\r\n} from '@chakra-ui/react';\r\nimport { ExportSquare, Map1, GalleryEdit } from 'iconsax-react';\r\nimport DragDrop from '../../components/DragDrop';\r\n// import Loading from '../../components/Loading';\r\nimport {\r\n  readInFile,\r\n  writeInFile,\r\n  convertFileToArray,\r\n  convertAssetToBase64,\r\n  convertArrayToFile,\r\n} from './../../Utils';\r\nimport { TYPE_AUDIO } from '../../constant';\r\nimport useChangeMap from '../../hook/useChangeMap';\r\nconst fs = window.require('fs');\r\n\r\nconst TempFolder = process.env.REACT_APP_FOLDER_TEMPORAL;\r\n\r\nconst ChangeSoundsContainer = (props) => {\r\n  const { selectedGame } = props;\r\n  const navigate = useNavigate();\r\n  const toast = useToast();\r\n  const params = useParams();\r\n  const isChangeMap = useChangeMap();\r\n  const idgame = params.idgame;\r\n  const ididea = params.ididea;\r\n  const locationSaveFile = `${TempFolder}/Sound-${ididea}.js`;\r\n  console.log('ChangeSoundsContainer loaded');\r\n\r\n  const [variableListState, setVariableListState] = useState([]);\r\n\r\n  const handleFile = (data) => {\r\n    //convert sound drag to base64\r\n    var soundAsBase64 = convertAssetToBase64(data.file.path);\r\n    setVariableListState((pre) => {\r\n      pre[data.index].url = `data:audio/mpeg;base64,${soundAsBase64}`;\r\n      return pre;\r\n    });\r\n    const result = writeInFile(\r\n      locationSaveFile,\r\n      convertArrayToFile(variableListState)\r\n    );\r\n    result\r\n      ? toast({\r\n          title: `Save Asset succeslully!`,\r\n          position: 'top',\r\n          isClosable: true,\r\n          status: 'success',\r\n        })\r\n      : toast({\r\n          title: `Fail to seve Asset!`,\r\n          position: 'top',\r\n          isClosable: true,\r\n          status: 'error',\r\n        });\r\n  };\r\n  //save file before change route\r\n  const handleChangePage = (route) => {\r\n    const result = writeInFile(\r\n      locationSaveFile,\r\n      convertArrayToFile(variableListState)\r\n    );\r\n    result\r\n      ? toast({\r\n          title: `Save Asset succeslully!`,\r\n          position: 'top',\r\n          isClosable: true,\r\n          status: 'success',\r\n        })\r\n      : toast({\r\n          title: `Fail to seve Asset!`,\r\n          position: 'top',\r\n          isClosable: true,\r\n          status: 'error',\r\n        });\r\n    navigate(`${route}`);\r\n  };\r\n\r\n  //check recent file, transform data to render\r\n  useEffect(() => {\r\n    const recentFileEdit = fs\r\n      .readdirSync(TempFolder)\r\n      .filter(\r\n        (item) =>\r\n          item.toLowerCase().includes(`${ididea}`) &&\r\n          item.toLowerCase().includes(`sound`)\r\n      );\r\n    let variableList;\r\n    if (recentFileEdit.length > 0) {\r\n      const content = readInFile(`${TempFolder}/${recentFileEdit[0]}`);\r\n      variableList = convertFileToArray(content);\r\n    } else {\r\n      fs.readdirSync(TempFolder)\r\n        .filter((item) => !item.toLowerCase().includes(`${ididea}`))\r\n        .forEach((file) => {\r\n          fs.unlink(`./src/TempCombine/${file}`, (err) => {\r\n            if (err) {\r\n              console.error(err);\r\n              return;\r\n            }\r\n          });\r\n        });\r\n      const ideaSelect =\r\n        selectedGame.idea[\r\n          selectedGame?.idea?.findIndex((idea) => idea.id === ididea)\r\n        ];\r\n\r\n      const SoundFile = fs\r\n        .readdirSync(`${ideaSelect.linkBaseCode}`)\r\n        .filter((item) => item.toLowerCase().includes('sound'));\r\n\r\n      const contentSoundFile = fs.readFileSync(\r\n        `${ideaSelect.linkBaseCode}/${SoundFile[0]}`,\r\n        'utf8'\r\n      );\r\n      variableList = convertFileToArray(contentSoundFile);\r\n    }\r\n\r\n    //optimize performance\r\n    let dataTranformStateTemp = [];\r\n    variableList.map((item, index) => {\r\n      dataTranformStateTemp.push({\r\n        name: item[0],\r\n        url: item[1],\r\n      });\r\n      if (index == variableList.length - 1) {\r\n        setVariableListState((pre) => [...dataTranformStateTemp]);\r\n        dataTranformStateTemp = [];\r\n      }\r\n    });\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Box mb=\"5\">\r\n        <Box height=\"75vh\" overflowY=\"scroll\">\r\n          <Table w=\"100%\" my=\"5\" variant=\"striped\" colorScheme=\"gray\">\r\n            <Thead>\r\n              <Tr>\r\n                <Th textAlign=\"center\">Index</Th>\r\n                <Th>Name Sound</Th>\r\n                <Th>Current Sound</Th>\r\n                <Th>New Sound</Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {variableListState.map((item, index) => {\r\n                return (\r\n                  <Tr key={index}>\r\n                    <Td textAlign=\"center\">{index + 1}</Td>\r\n                    <Td>{item.name.slice(0, -3)}</Td>\r\n                    <Td>\r\n                      <audio controls>\r\n                        <source src={item.url} />\r\n                      </audio>\r\n                    </Td>\r\n                    <Td>\r\n                      <DragDrop\r\n                        text=\"asset\"\r\n                        handleFile={handleFile}\r\n                        indexFile={index}\r\n                        type={TYPE_AUDIO}\r\n                      />\r\n                    </Td>\r\n                  </Tr>\r\n                );\r\n              })}\r\n            </Tbody>\r\n          </Table>\r\n        </Box>\r\n        <Flex justifyContent=\"flex-end\" mt=\"40px\">\r\n          <Box>\r\n            <Button\r\n              colorScheme=\"green\"\r\n              rightIcon={<GalleryEdit size=\"20\" color=\"currentColor\" />}\r\n              onClick={() =>\r\n                handleChangePage(`/editgame/${idgame}/${ididea}/changeassets`)\r\n              }\r\n            >\r\n              Change Assets\r\n            </Button>{' '}\r\n            <Button\r\n              colorScheme=\"green\"\r\n              rightIcon={<Map1 size=\"20\" color=\"currentColor\" />}\r\n              onClick={() =>\r\n                handleChangePage(`/editgame/${idgame}/${ididea}/changemap`)\r\n              }\r\n              isDisabled={isChangeMap}\r\n            >\r\n              Change Map\r\n            </Button>{' '}\r\n            <Button\r\n              ml=\"5\"\r\n              colorScheme=\"green\"\r\n              rightIcon={<ExportSquare size=\"20\" color=\"currentColor\" />}\r\n              onClick={() =>\r\n                handleChangePage(`/export/${idgame}/${ididea}/false`)\r\n              }\r\n            >\r\n              Export Now\r\n            </Button>{' '}\r\n          </Box>\r\n        </Flex>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nChangeSoundsContainer.propTypes = {};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    selectedGame: state.gameSelected,\r\n  };\r\n};\r\nexport default connect(mapStateToProps, null)(ChangeSoundsContainer);\r\n",["119","120"],"D:\\Monster\\hyper-ads-export\\src\\services\\firebaseConfig.js",[],["121","122"],"D:\\Monster\\hyper-ads-export\\src\\pages\\EditGame\\ChangeMap\\index.jsx",[],["123","124"],"D:\\Monster\\hyper-ads-export\\src\\pages\\EditGame\\SelectIdea\\index.jsx",["125","126"],"import React, { useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  InputLeftElement,\r\n  InputGroup,\r\n  Input,\r\n  Box,\r\n  Button,\r\n  Text,\r\n  useDisclosure,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalCloseButton,\r\n  ModalBody,\r\n  FormControl,\r\n  FormLabel,\r\n  ModalFooter,\r\n  FormErrorMessage,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { SearchNormal1, AddSquare } from \"iconsax-react\";\r\nimport IdeaItem from \"../../../components/IdeaItem\";\r\nimport { AddIdeaAction } from \"../../../action\";\r\nimport { useParams } from \"react-router\";\r\nconst SelectIdeaPage = (props) => {\r\n  const { gameSelected, addIdeaDispatch } = props;\r\n  const params = useParams();\r\n  const idgame = params.idgame;\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [listIdeaState, setListIdeaState] = React.useState([]);\r\n  const [searchIdeaState, setSearchIdeaState] = React.useState();\r\n\r\n  const nameRef = React.useRef();\r\n  const finalRef = React.useRef();\r\n\r\n  const handleSubmit = async (values, { setSubmitting, resetForm }) => {\r\n    const { name, linkBaseCode } = values;\r\n    const payload = {\r\n      id: uuid(),\r\n      name: name,\r\n      linkBaseCode: linkBaseCode,\r\n      parentGameId: idgame,\r\n    };\r\n    addIdeaDispatch(payload);\r\n    setSubmitting(false);\r\n    toast({\r\n      position: \"top\",\r\n      title: \"Add game successfully!\",\r\n      status: \"success\",\r\n      duration: 2000,\r\n      isClosable: true,\r\n    });\r\n    let timeOut = setTimeout(() => {\r\n      resetForm();\r\n      onClose();\r\n      clearTimeout(timeOut);\r\n    }, 2000);\r\n  };\r\n  const handleSearch = (event) => {\r\n    const { value } = event.target;\r\n    let searchResult = searchIdeaState.filter((item) =>\r\n      item.name.toLowerCase().includes(value.toLowerCase())\r\n    );\r\n    setListIdeaState(searchResult);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setListIdeaState(gameSelected.idea || []);\r\n    setSearchIdeaState(gameSelected.idea || []);\r\n  }, [gameSelected]);\r\n\r\n  return (\r\n    <>\r\n      <Text align=\"center\" fontSize=\"30\" fontWeight=\"bold\">\r\n        CHOOSE IDEA\r\n      </Text>\r\n      <Box my=\"5\">\r\n        <InputGroup mx=\"3\">\r\n          <InputLeftElement\r\n            pointerEvents=\"none\"\r\n            children={<SearchNormal1 color=\"currentColor\" />}\r\n          />\r\n          <Input\r\n            minW=\"200px\"\r\n            width=\"50%\"\r\n            type=\"text\"\r\n            placeholder=\"search ...\"\r\n            onChange={handleSearch}\r\n          />\r\n        </InputGroup>\r\n      </Box>\r\n      <Box display=\"flex\" justifyContent=\"flex-start\" flexWrap=\"wrap\">\r\n        <Button\r\n          m=\"3\"\r\n          onClick={onOpen}\r\n          leftIcon={<AddSquare color=\"currentColor\" />}\r\n          colorScheme=\"blue\"\r\n        >\r\n          <Text mr=\"0\">Add Idea</Text>\r\n        </Button>\r\n        <Formik\r\n          initialValues={{\r\n            name: \"\",\r\n            linkBaseCode: \"\",\r\n          }}\r\n          validationSchema={Yup.object({\r\n            name: Yup.string().required(\"Required\"),\r\n            linkBaseCode: Yup.string().required(\"Required\"),\r\n          })}\r\n          onSubmit={handleSubmit}\r\n        >\r\n          {(formik) => (\r\n            <Modal\r\n              initialFocusRef={nameRef}\r\n              finalFocusRef={finalRef}\r\n              isOpen={isOpen}\r\n              onClose={onClose}\r\n            >\r\n              <ModalOverlay />\r\n              <ModalContent>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                  <ModalHeader>Add Idea</ModalHeader>\r\n                  <ModalCloseButton />\r\n                  <ModalBody pb={6}>\r\n                    {\" \"}\r\n                    <FormControl\r\n                      isRequired\r\n                      isInvalid={formik.touched.name && formik.errors.name}\r\n                    >\r\n                      <FormLabel mt={4}>Title idea</FormLabel>\r\n                      <Input\r\n                        ref={nameRef}\r\n                        type=\"text\"\r\n                        placeholder=\"Ex: Sky Raptor\"\r\n                        {...formik.getFieldProps(\"name\")}\r\n                      />\r\n                      <FormErrorMessage>{formik.errors.name}</FormErrorMessage>\r\n                    </FormControl>\r\n                    <FormControl\r\n                      isRequired\r\n                      isInvalid={\r\n                        formik.touched.linkBaseCode &&\r\n                        formik.errors.linkBaseCode\r\n                      }\r\n                    >\r\n                      <FormLabel mt={4}>Link base code</FormLabel>\r\n                      <Input\r\n                        type=\"text\"\r\n                        placeholder=\"Ex: D:/order\"\r\n                        {...formik.getFieldProps(\"linkBaseCode\")}\r\n                      />\r\n                      <FormErrorMessage>\r\n                        {formik.errors.linkBaseCode}\r\n                      </FormErrorMessage>\r\n                    </FormControl>\r\n                  </ModalBody>\r\n                  <ModalFooter>\r\n                    <Button colorScheme=\"teal\" mr={3} type=\"submit\">\r\n                      Save\r\n                    </Button>\r\n                    <Button onClick={onClose}>Cancel</Button>\r\n                  </ModalFooter>\r\n                </form>\r\n              </ModalContent>\r\n            </Modal>\r\n          )}\r\n        </Formik>\r\n        {listIdeaState?.map((idea) => (\r\n          <IdeaItem key={idea.id} idGame={idgame} ideaDetail={idea} />\r\n        ))}\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nSelectIdeaPage.propTypes = {};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    gameSelected: state.gameSelected,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addIdeaDispatch: (payload) => dispatch(AddIdeaAction(payload)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectIdeaPage);\r\n",["127","128"],"D:\\Monster\\hyper-ads-export\\src\\hook\\useChangeMap.jsx",["129","130"],"import { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { readInFolder } from './../Utils';\r\n\r\nconst useChangeMap = () => {\r\n  const useparams = useParams();\r\n  const { ididea } = useparams;\r\n  const selectedGame = useSelector((store) => store.gameSelected);\r\n  const [changeMapState, setChangeMapState] = useState(false);\r\n  useEffect(() => {\r\n    const ideaSelect =\r\n      selectedGame.idea[\r\n        selectedGame?.idea?.findIndex((idea) => idea.id === ididea)\r\n      ];\r\n    const listFileBase = readInFolder(ideaSelect.linkBaseCode);\r\n    listFileBase?.map((file) => {\r\n      if (file.toLowerCase().includes('map')) {\r\n        setChangeMapState(true);\r\n      }\r\n    });\r\n  }, []);\r\n  return !changeMapState;\r\n};\r\n\r\nexport default useChangeMap;\r\n","D:\\Monster\\hyper-ads-export\\src\\components\\GameItem\\index.jsx",["131"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n  Input,\r\n  Box,\r\n  Button,\r\n  Text,\r\n  useDisclosure,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalCloseButton,\r\n  ModalBody,\r\n  FormControl,\r\n  FormLabel,\r\n  ModalFooter,\r\n  FormErrorMessage,\r\n  useToast,\r\n  AlertDialog,\r\n  AlertDialogOverlay,\r\n  AlertDialogContent,\r\n  AlertDialogHeader,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  Select,\r\n} from '@chakra-ui/react';\r\nimport { ArrowDown3, Trash } from 'iconsax-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  DeleteGameAction,\r\n  SelectGameAction,\r\n  UpdateGameAction,\r\n} from '../../action';\r\n\r\nconst GameItem = (props) => {\r\n  const {\r\n    gameDetail,\r\n    UpdateGameDispatch,\r\n    DeleteGameDispatch,\r\n    SelectGameDispatch,\r\n  } = props;\r\n  const { id } = gameDetail;\r\n  const [gameDetailState, setGameDetailState] = React.useState(gameDetail);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [isOpenAlert, setIsOpenAlert] = React.useState(false);\r\n  const onCloseAlert = () => setIsOpenAlert(false);\r\n  const cancelAlertRef = React.useRef();\r\n\r\n  const toast = useToast();\r\n  const nameRef = React.useRef();\r\n  const finalRef = React.useRef();\r\n\r\n  const handleUpdate = async (values, { setSubmitting, resetForm }) => {\r\n    const { name, linkStoreIOS, linkStoreAndroid, engine } = values;\r\n    const payload = {\r\n      id,\r\n      name,\r\n      linkStoreIOS,\r\n      linkStoreAndroid,\r\n      engine,\r\n    };\r\n    UpdateGameDispatch(payload);\r\n\r\n    setSubmitting(false);\r\n    toast({\r\n      position: 'top',\r\n      title: 'Edit game successfully!',\r\n      status: 'success',\r\n      duration: 2000,\r\n      isClosable: true,\r\n    });\r\n    let timeOut = setTimeout(() => {\r\n      onClose();\r\n      clearTimeout(timeOut);\r\n    }, 2000);\r\n    setGameDetailState(payload);\r\n  };\r\n  const handleDelete = async () => {\r\n    DeleteGameDispatch({ id });\r\n    toast({\r\n      position: 'top',\r\n      title: 'Delete game successfully!',\r\n      status: 'success',\r\n      duration: 2000,\r\n      isClosable: true,\r\n    });\r\n    onCloseAlert();\r\n    let timeOut = setTimeout(() => {\r\n      onClose();\r\n      clearTimeout(timeOut);\r\n    }, 1000);\r\n  };\r\n  const handleSelectGame = () => {\r\n    SelectGameDispatch(gameDetail);\r\n  };\r\n  return (\r\n    <Box my=\"3\" ml=\"3\">\r\n      <Formik\r\n        initialValues={{\r\n          name: gameDetailState.name,\r\n          linkStoreIOS: gameDetailState.linkStoreIOS,\r\n          linkStoreAndroid: gameDetailState.linkStoreAndroid,\r\n          engine: gameDetailState.engine,\r\n        }}\r\n        validationSchema={Yup.object({\r\n          name: Yup.string().required('Required'),\r\n          linkIOS: Yup.string(),\r\n          linkAndroid: Yup.string(),\r\n        })}\r\n        onSubmit={handleUpdate}\r\n      >\r\n        {(formik) => (\r\n          <Modal\r\n            initialFocusRef={nameRef}\r\n            finalFocusRef={finalRef}\r\n            isOpen={isOpen}\r\n            onClose={onClose}\r\n          >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n              <form onSubmit={formik.handleSubmit}>\r\n                <ModalHeader>Edit info for your game</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody pb={6}>\r\n                  {' '}\r\n                  <FormControl\r\n                    isRequired\r\n                    isInvalid={formik.touched.name && formik.errors.name}\r\n                  >\r\n                    <FormLabel mt={4}>Name game</FormLabel>\r\n                    <Input\r\n                      ref={nameRef}\r\n                      type=\"text\"\r\n                      placeholder={`Ex: ${gameDetailState.name}`}\r\n                      {...formik.getFieldProps('name')}\r\n                    />\r\n                    <FormErrorMessage>{formik.errors.name}</FormErrorMessage>\r\n                  </FormControl>\r\n                  <FormControl\r\n                    isInvalid={\r\n                      formik.touched.linkStoreIOS && formik.errors.linkStoreIOS\r\n                    }\r\n                  >\r\n                    <FormLabel mt={4}>Link store IOS</FormLabel>\r\n                    <Input\r\n                      type=\"text\"\r\n                      placeholder=\"Ex: https://apps.apple.com/us/app/sky-raptor/id1518974662\"\r\n                      {...formik.getFieldProps('linkStoreIOS')}\r\n                    />\r\n                    <FormErrorMessage>\r\n                      {formik.errors.linkStoreIOS}\r\n                    </FormErrorMessage>\r\n                  </FormControl>\r\n                  <FormControl\r\n                    isInvalid={\r\n                      formik.touched.linkStoreAndroid &&\r\n                      formik.errors.linkStoreAndroid\r\n                    }\r\n                  >\r\n                    <FormLabel mt={4}>Link store Android</FormLabel>\r\n                    <Input\r\n                      type=\"text\"\r\n                      placeholder=\"Ex: https://play.google.com/store/apps/details?id=com.skyraptor.spaceshooter\"\r\n                      {...formik.getFieldProps('linkStoreAndroid')}\r\n                    />\r\n                    <FormErrorMessage>\r\n                      {formik.errors.linkStoreAndroid}\r\n                    </FormErrorMessage>\r\n                  </FormControl>\r\n                  <FormControl>\r\n                    <FormLabel mt={4}>Engine</FormLabel>\r\n                    <Select\r\n                      defaultValue=\"phaser\"\r\n                      {...formik.getFieldProps('engine')}\r\n                    >\r\n                      <option value=\"phaser\">Phaser</option>\r\n                      <option value=\"cocos\">Cocos</option>\r\n                    </Select>\r\n                    <FormErrorMessage>\r\n                      {formik.errors.linkStoreAndroid}\r\n                    </FormErrorMessage>\r\n                  </FormControl>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                  <Button colorScheme=\"teal\" mr={3} type=\"submit\">\r\n                    Save\r\n                  </Button>\r\n                  <Button\r\n                    colorScheme=\"red\"\r\n                    onClick={() => setIsOpenAlert(true)}\r\n                    rightIcon={<Trash color=\"currentColor\" size=\"20\" />}\r\n                  >\r\n                    Delete Game\r\n                  </Button>\r\n                </ModalFooter>\r\n              </form>\r\n            </ModalContent>\r\n          </Modal>\r\n        )}\r\n      </Formik>\r\n      <Box display=\"flex\" flexWrap=\"nowrap\" onClick={handleSelectGame}>\r\n        <Link to={`/editgame/` + id}>\r\n          <Button borderRightRadius=\"0\" colorScheme=\"teal\">\r\n            <Text>{gameDetailState.name}</Text>\r\n          </Button>\r\n        </Link>\r\n        <Button px=\"0\" borderLeftRadius=\"0\" onClick={onOpen} colorScheme=\"teal\">\r\n          <ArrowDown3 m=\"0\" bg=\"tomato\" color=\"currentColor\" />\r\n        </Button>\r\n      </Box>\r\n\r\n      <AlertDialog\r\n        isOpen={isOpenAlert}\r\n        leastDestructiveRef={cancelAlertRef}\r\n        onClose={onCloseAlert}\r\n      >\r\n        <AlertDialogOverlay>\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              Delete this game\r\n            </AlertDialogHeader>\r\n\r\n            <AlertDialogBody>\r\n              Are you sure? You can't undo this action afterwards.\r\n            </AlertDialogBody>\r\n\r\n            <AlertDialogFooter>\r\n              <Button ref={cancelAlertRef} onClick={onCloseAlert}>\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                colorScheme=\"red\"\r\n                onClick={handleDelete}\r\n                ml={3}\r\n                rightIcon={<Trash color=\"currentColor\" size=\"20\" />}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nGameItem.propTypes = {};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    UpdateGameDispatch: (payload) => {\r\n      dispatch(UpdateGameAction(payload));\r\n    },\r\n    DeleteGameDispatch: (payload) => {\r\n      dispatch(DeleteGameAction(payload));\r\n    },\r\n    SelectGameDispatch: (payload) => {\r\n      dispatch(SelectGameAction(payload));\r\n    },\r\n  };\r\n};\r\nexport default connect(null, mapDispatchToProps)(GameItem);\r\n","D:\\Monster\\hyper-ads-export\\src\\container\\Authentication\\styles.js",[],"D:\\Monster\\hyper-ads-export\\src\\components\\NavigationBar\\index.jsx",["132","133"],"D:\\Monster\\hyper-ads-export\\src\\Router\\PublicRouter\\index.jsx",[],"D:\\Monster\\hyper-ads-export\\src\\container\\ChangeMap\\index.jsx",["134"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { AudioSquare, ExportSquare, GalleryEdit } from 'iconsax-react';\r\nimport {\r\n  Box,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Td,\r\n  Th,\r\n  Flex,\r\n  Button,\r\n  Textarea,\r\n  useToast,\r\n} from '@chakra-ui/react';\r\nimport DragDrop from '../../components/DragDrop';\r\nimport { writeInFile, readInFile } from '../../Utils';\r\nimport { TYPE_JSON } from '../../constant';\r\n\r\nconst fs = window.require('fs');\r\nconst TempFolder = process.env.REACT_APP_FOLDER_TEMPORAL;\r\n\r\nconst ChangeMapContainer = (props) => {\r\n  const { selectedGame } = props;\r\n  const navigate = useNavigate();\r\n  const toast = useToast();\r\n  const params = useParams();\r\n  const idgame = params.idgame;\r\n  const ididea = params.ididea;\r\n\r\n  const locationSaveFile = `${TempFolder}/Map-${ididea}.json`;\r\n  console.log('ChangeMapContainer loaded');\r\n\r\n  const [currentMapDataState, setCurrentMapDataState] = React.useState('');\r\n  const [newMapDataState, setNewMapDataState] = React.useState();\r\n\r\n  const handleFile = (data) => {\r\n    const readResult = readInFile(data.file.path);\r\n    setNewMapDataState(() => readResult);\r\n    const writeResult = writeInFile(locationSaveFile, readResult);\r\n    writeResult\r\n      ? toast({\r\n          title: `Save Asset succeslully!`,\r\n          position: 'top',\r\n          isClosable: true,\r\n          status: 'success',\r\n        })\r\n      : toast({\r\n          title: `Fail to seve Asset!`,\r\n          position: 'top',\r\n          isClosable: true,\r\n          status: 'error',\r\n        });\r\n  };  \r\n  const handleChangePage = (route) => {\r\n    if (newMapDataState) {\r\n      const result = writeInFile(locationSaveFile, newMapDataState);\r\n      result\r\n        ? toast({\r\n            title: `Save Asset succeslully!`,\r\n            position: 'top',\r\n            isClosable: true,\r\n            status: 'success',\r\n          })\r\n        : toast({\r\n            title: `Fail to seve Asset!`,\r\n            position: 'top',\r\n            isClosable: true,\r\n            status: 'error',\r\n          });\r\n    }\r\n    navigate(`${route}`);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const recentFileEdit = fs\r\n      .readdirSync(TempFolder)\r\n      .filter(\r\n        (item) =>\r\n          item.toLowerCase().includes(`${ididea}`) &&\r\n          item.toLowerCase().includes(`map`)\r\n      );\r\n    if (recentFileEdit.length > 0) {\r\n      const content = readInFile(`${TempFolder}/${recentFileEdit[0]}`);\r\n      setCurrentMapDataState(content);\r\n    } else {\r\n      fs.readdirSync(TempFolder)\r\n        .filter((item) => !item.toLowerCase().includes(`${ididea}`))\r\n        .forEach((file) => {\r\n          fs.unlink(`./src/TempCombine/${file}`, (err) => {\r\n            if (err) {\r\n              console.error(err);\r\n              return;\r\n            }\r\n          });\r\n        });\r\n      const ideaSelect =\r\n        selectedGame.idea[\r\n          selectedGame?.idea?.findIndex((idea) => idea.id === ididea)\r\n        ];\r\n\r\n      const MapFile = fs\r\n        .readdirSync(`${ideaSelect.linkBaseCode}`)\r\n        .filter((item) => item.toLowerCase().includes('map'));\r\n\r\n      const contentMapFile = fs.readFileSync(\r\n        `${ideaSelect.linkBaseCode}/${MapFile[0]}`,\r\n        'utf8'\r\n      );\r\n      setCurrentMapDataState((pre) => contentMapFile);\r\n    }\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Box mb=\"5\">\r\n        <Box height=\"75vh\" overflowY=\"scroll\">\r\n          <Table w=\"100%\" my=\"5\" variant=\"striped\" colorScheme=\"gray\">\r\n            <Thead>\r\n              <Tr>\r\n                <Th>Current Map</Th>\r\n                <Th>New Map</Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              <Tr>\r\n                <Td>\r\n                  <Textarea type=\"text\" value={currentMapDataState} rows=\"18\" />\r\n                </Td>\r\n                <Td>\r\n                  <DragDrop\r\n                    text=\"asset\"\r\n                    handleFile={handleFile}\r\n                    type={TYPE_JSON}\r\n                  />\r\n                </Td>\r\n              </Tr>\r\n            </Tbody>\r\n          </Table>\r\n        </Box>\r\n        <Flex justifyContent=\"flex-end\" mt=\"40px\">\r\n          <Box>\r\n            <Button\r\n              colorScheme=\"green\"\r\n              rightIcon={<AudioSquare size=\"20\" color=\"currentColor\" />}\r\n              onClick={() =>\r\n                handleChangePage(`/editgame/${idgame}/${ididea}/changesounds`)\r\n              }\r\n            >\r\n              Change Sounds\r\n            </Button>{' '}\r\n            <Button\r\n              colorScheme=\"green\"\r\n              rightIcon={<GalleryEdit size=\"20\" color=\"currentColor\" />}\r\n              onClick={() =>\r\n                handleChangePage(`/editgame/${idgame}/${ididea}/changeassets`)\r\n              }\r\n            >\r\n              Change Assets\r\n            </Button>{' '}\r\n            <Button\r\n              ml=\"5\"\r\n              colorScheme=\"green\"\r\n              rightIcon={<ExportSquare size=\"20\" color=\"currentColor\" />}\r\n              onClick={() =>\r\n                handleChangePage(`/export/${idgame}/${ididea}/false`)\r\n              }\r\n            >\r\n              Export Now\r\n            </Button>{' '}\r\n          </Box>\r\n        </Flex>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    selectedGame: state.gameSelected,\r\n  };\r\n};\r\nexport default connect(mapStateToProps, null)(ChangeMapContainer);\r\n","D:\\Monster\\hyper-ads-export\\src\\Router\\index.jsx",["135"],"import React from 'react';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nimport PrivateRouter from './PrivateRouter';\r\nimport PublicRouter from './PublicRouter';\r\n\r\nconst RouterWrapper = () => {\r\n  const [cookies, setCookie] = useCookies(['access_token', 'refresh_token']);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {cookies.access_token ? <PrivateRouter /> : <PublicRouter />}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default RouterWrapper;\r\n","D:\\Monster\\hyper-ads-export\\src\\pages\\Home\\index.jsx",["136","137","138"],"import React, { useEffect } from 'react';\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\r\nimport { ref, get } from 'firebase/database';\r\nimport { useCookies } from 'react-cookie';\r\nimport {\r\n  InputLeftElement,\r\n  InputGroup,\r\n  Input,\r\n  Box,\r\n  Button,\r\n  Text,\r\n  useDisclosure,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalCloseButton,\r\n  ModalBody,\r\n  FormControl,\r\n  FormLabel,\r\n  ModalFooter,\r\n  FormErrorMessage,\r\n  useToast,\r\n  Select,\r\n} from '@chakra-ui/react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { SearchNormal1, AddSquare } from 'iconsax-react';\r\nimport GameItem from '../../components/GameItem';\r\nimport { AddGameAction, getUserData, InitGameAction } from '../../action';\r\nimport { db } from './../../services/firebaseConfig';\r\n\r\nconst HomePage = (props) => {\r\n  const { listGame, initGameDispatch, addGameDispatch } = props;\r\n  const [Cookies, setCookie, removeCookie] = useCookies([\r\n    'access_token',\r\n    'refresh_token',\r\n  ]);\r\n  const userData = useSelector((store) => store.userData);\r\n  const dispatch = useDispatch();\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [listGameState, setListGameState] = React.useState(() => {});\r\n  const [searchGameState, setSearchGameState] = React.useState();\r\n  const nameRef = React.useRef();\r\n  const finalRef = React.useRef();\r\n  const provider = new GoogleAuthProvider();\r\n\r\n  const handleAddGame = (values, { setSubmitting, resetForm }) => {\r\n    const { name, linkIOS, linkAndroid, engine } = values;\r\n    const payload = {\r\n      id: uuid(),\r\n      name: name,\r\n      linkStoreIOS: linkIOS,\r\n      linkStoreAndroid: linkAndroid,\r\n      idea: [],\r\n      engine,\r\n    };\r\n    addGameDispatch(payload);\r\n    toast({\r\n      position: 'top',\r\n      title: 'Add game successfully!',\r\n      status: 'success',\r\n      duration: 2000,\r\n      isClosable: true,\r\n    });\r\n    let timeOut = setTimeout(() => {\r\n      setSubmitting(false);\r\n      resetForm();\r\n      onClose();\r\n      clearTimeout(timeOut);\r\n    }, 2000);\r\n  };\r\n  const handleSearch = (event) => {\r\n    const { value } = event.target;\r\n    let searchResult = searchGameState.filter((item) =>\r\n      item.name.toLowerCase().includes(value.toLowerCase())\r\n    );\r\n    setListGameState(searchResult);\r\n  };\r\n  useEffect(() => {\r\n    setListGameState(listGame);\r\n    setSearchGameState(listGame);\r\n  }, [listGame]);\r\n\r\n  useEffect(() => {\r\n    const dataRef = ref(db, 'data/');\r\n    if (userData.accessToken) {\r\n      get(dataRef)\r\n        .then((snapshot) => {\r\n          if (snapshot.exists()) {\r\n            let convertToArr = [];\r\n            let data = snapshot.val();\r\n            for (const key in data) {\r\n              if (Object.hasOwnProperty.call(data, key)) {\r\n                const element = data[key];\r\n                convertToArr.push({ ...element });\r\n              }\r\n            }\r\n            initGameDispatch(convertToArr);\r\n          } else {\r\n            console.log('No data available');\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    }\r\n  }, [userData]);\r\n\r\n  useEffect(() => {\r\n    const auth = getAuth();\r\n    console.log(userData);\r\n    if (!userData.accessToken) {\r\n      signInWithPopup(auth, provider)\r\n        .then((result) => {\r\n          // This gives you a Google Access Token. You can use it to access the Google API.\r\n          const credential = GoogleAuthProvider.credentialFromResult(result);\r\n          const token = credential.accessToken;\r\n          setCookie('access_token', token, { path: '/' });\r\n          dispatch(getUserData(result.user));\r\n        })\r\n        .catch((error) => {\r\n          const errorMessage = error.message;\r\n          toast({\r\n            title: `${errorMessage}`,\r\n            status: 'error',\r\n            isClosable: true,\r\n          });\r\n          removeCookie('access_token');\r\n        });\r\n    }\r\n  }, []);\r\n  return (\r\n    <Box>\r\n      <Text align=\"center\" fontSize=\"30\" fontWeight=\"bold\">\r\n        CHOOSE GAME\r\n      </Text>\r\n      <Box my=\"5\">\r\n        <InputGroup mx=\"3\">\r\n          <InputLeftElement\r\n            pointerEvents=\"none\"\r\n            children={<SearchNormal1 color=\"currentColor\" />}\r\n          />\r\n          <Input\r\n            minW=\"200px\"\r\n            width=\"50%\"\r\n            type=\"text\"\r\n            placeholder=\"search ...\"\r\n            onChange={handleSearch}\r\n          />\r\n        </InputGroup>\r\n      </Box>\r\n      <Box\r\n        display={userData?.accessToken ? 'flex' : 'none'}\r\n        justifyContent=\"flex-start\"\r\n        flexWrap=\"wrap\"\r\n      >\r\n        <Button\r\n          m=\"3\"\r\n          onClick={onOpen}\r\n          leftIcon={<AddSquare color=\"currentColor\" />}\r\n          colorScheme=\"blue\"\r\n        >\r\n          <Text mr=\"0\">Add Game</Text>\r\n        </Button>\r\n        <Formik\r\n          initialValues={{\r\n            name: '',\r\n            linkIOS: '',\r\n            linkAndroid: '',\r\n            engine: 'phaser',\r\n          }}\r\n          validationSchema={Yup.object({\r\n            name: Yup.string().required('Required'),\r\n            linkIOS: Yup.string(),\r\n            linkAndroid: Yup.string(),\r\n          })}\r\n          onSubmit={handleAddGame}\r\n        >\r\n          {(formik) => (\r\n            <Modal\r\n              initialFocusRef={nameRef}\r\n              finalFocusRef={finalRef}\r\n              isOpen={isOpen}\r\n              onClose={onClose}\r\n            >\r\n              <ModalOverlay />\r\n              <ModalContent>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                  <ModalHeader>Add detail for your game</ModalHeader>\r\n                  <ModalCloseButton />\r\n                  <ModalBody pb={6}>\r\n                    {' '}\r\n                    <FormControl\r\n                      isRequired\r\n                      isInvalid={formik.touched.name && formik.errors.name}\r\n                    >\r\n                      <FormLabel mt={4}>Name game</FormLabel>\r\n                      <Input\r\n                        ref={nameRef}\r\n                        type=\"text\"\r\n                        placeholder=\"Ex: Sky Raptor\"\r\n                        {...formik.getFieldProps('name')}\r\n                      />\r\n                      <FormErrorMessage>{formik.errors.name}</FormErrorMessage>\r\n                    </FormControl>\r\n                    <FormControl\r\n                      isInvalid={\r\n                        formik.touched.linkIOS && formik.errors.linkIOS\r\n                      }\r\n                    >\r\n                      <FormLabel mt={4}>Link store IOS</FormLabel>\r\n                      <Input\r\n                        type=\"text\"\r\n                        placeholder=\"Ex: https://apps.apple.com/us/app/sky-raptor/id1518974662\"\r\n                        {...formik.getFieldProps('linkIOS')}\r\n                      />\r\n                      <FormErrorMessage>\r\n                        {formik.errors.linkIOS}\r\n                      </FormErrorMessage>\r\n                    </FormControl>\r\n                    <FormControl\r\n                      isInvalid={\r\n                        formik.touched.linkAndroid && formik.errors.linkAndroid\r\n                      }\r\n                    >\r\n                      <FormLabel mt={4}>Link store Android</FormLabel>\r\n                      <Input\r\n                        type=\"text\"\r\n                        placeholder=\"Ex: https://play.google.com/store/apps/details?id=com.skyraptor.spaceshooter\"\r\n                        {...formik.getFieldProps('linkAndroid')}\r\n                      />\r\n                      <FormErrorMessage>\r\n                        {formik.errors.linkAndroid}\r\n                      </FormErrorMessage>\r\n                    </FormControl>\r\n                    <FormControl>\r\n                      <FormLabel mt={4}>Engine</FormLabel>\r\n                      <Select\r\n                        defaultValue=\"phaser\"\r\n                        {...formik.getFieldProps('engine')}\r\n                      >\r\n                        <option value=\"phaser\">Phaser</option>\r\n                        <option value=\"cocos\">Cocos</option>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </ModalBody>\r\n                  <ModalFooter>\r\n                    <Button colorScheme=\"teal\" mr={3} type=\"submit\">\r\n                      Save\r\n                    </Button>\r\n                    <Button onClick={onClose}>Cancel</Button>\r\n                  </ModalFooter>\r\n                </form>\r\n              </ModalContent>\r\n            </Modal>\r\n          )}\r\n        </Formik>\r\n        {listGameState?.map((game) => (\r\n          <GameItem key={game.id} gameDetail={game} />\r\n        ))}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nHomePage.propTypes = {};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    listGame: state.listGameStore,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    initGameDispatch: (payload) => dispatch(InitGameAction(payload)),\r\n    addGameDispatch: (payload) => dispatch(AddGameAction(payload)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","D:\\Monster\\hyper-ads-export\\src\\reducer\\index.js",[],"D:\\Monster\\hyper-ads-export\\src\\constant\\index.js",[],"D:\\Monster\\hyper-ads-export\\src\\components\\SaveTo\\index.jsx",[],"D:\\Monster\\hyper-ads-export\\src\\pages\\Export\\index.jsx",[],"D:\\Monster\\hyper-ads-export\\src\\container\\Export\\index.jsx",["139"],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":14,"column":10,"nodeType":"146","messageId":"147","endLine":14,"endColumn":17},{"ruleId":"140","replacedBy":"148"},{"ruleId":"142","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":134,"column":36,"nodeType":"152","messageId":"153","endLine":134,"endColumn":38},{"ruleId":"154","severity":1,"message":"155","line":139,"column":17,"nodeType":"156","messageId":"157","endLine":139,"endColumn":19},{"ruleId":"158","severity":1,"message":"159","line":144,"column":6,"nodeType":"160","endLine":144,"endColumn":8,"suggestions":"161"},{"ruleId":"140","replacedBy":"162"},{"ruleId":"142","replacedBy":"163"},{"ruleId":"140","replacedBy":"164"},{"ruleId":"142","replacedBy":"165"},{"ruleId":"140","replacedBy":"166"},{"ruleId":"142","replacedBy":"167"},{"ruleId":"144","severity":1,"message":"168","line":1,"column":28,"nodeType":"146","messageId":"147","endLine":1,"endColumn":34},{"ruleId":"144","severity":1,"message":"169","line":3,"column":8,"nodeType":"146","messageId":"147","endLine":3,"endColumn":17},{"ruleId":"140","replacedBy":"170"},{"ruleId":"142","replacedBy":"171"},{"ruleId":"150","severity":1,"message":"151","line":17,"column":30,"nodeType":"152","messageId":"153","endLine":17,"endColumn":32},{"ruleId":"158","severity":1,"message":"159","line":22,"column":6,"nodeType":"160","endLine":22,"endColumn":8,"suggestions":"172"},{"ruleId":"144","severity":1,"message":"169","line":2,"column":8,"nodeType":"146","messageId":"147","endLine":2,"endColumn":17},{"ruleId":"144","severity":1,"message":"145","line":34,"column":10,"nodeType":"146","messageId":"147","endLine":34,"endColumn":17},{"ruleId":"144","severity":1,"message":"173","line":34,"column":19,"nodeType":"146","messageId":"147","endLine":34,"endColumn":28},{"ruleId":"158","severity":1,"message":"174","line":114,"column":6,"nodeType":"160","endLine":114,"endColumn":8,"suggestions":"175"},{"ruleId":"144","severity":1,"message":"173","line":8,"column":19,"nodeType":"146","messageId":"147","endLine":8,"endColumn":28},{"ruleId":"144","severity":1,"message":"176","line":37,"column":10,"nodeType":"146","messageId":"147","endLine":37,"endColumn":17},{"ruleId":"158","severity":1,"message":"177","line":111,"column":6,"nodeType":"160","endLine":111,"endColumn":16,"suggestions":"178"},{"ruleId":"158","severity":1,"message":"179","line":135,"column":6,"nodeType":"160","endLine":135,"endColumn":8,"suggestions":"180"},{"ruleId":"154","severity":1,"message":"155","line":30,"column":20,"nodeType":"156","messageId":"157","endLine":30,"endColumn":22},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"no-unused-vars","'cookies' is assigned a value but never used.","Identifier","unusedVar",["181"],["182"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'ididea' and 'selectedGame.idea'. Either include them or remove the dependency array.","ArrayExpression",["183"],["181"],["182"],["181"],["182"],["181"],["182"],"'useRef' is defined but never used.","'PropTypes' is defined but never used.",["181"],["182"],["184"],"'setCookie' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'ididea' and 'selectedGame.idea'. Either include them or remove the dependency array.",["185"],"'Cookies' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'initGameDispatch'. Either include it or remove the dependency array.",["186"],"React Hook useEffect has missing dependencies: 'dispatch', 'provider', 'removeCookie', 'setCookie', 'toast', and 'userData'. Either include them or remove the dependency array.",["187"],"no-global-assign","no-unsafe-negation",{"desc":"188","fix":"189"},{"desc":"188","fix":"190"},{"desc":"188","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},"Update the dependencies array to be: [ididea, selectedGame.idea]",{"range":"196","text":"197"},{"range":"198","text":"197"},{"range":"199","text":"197"},"Update the dependencies array to be: [initGameDispatch, userData]",{"range":"200","text":"201"},"Update the dependencies array to be: [dispatch, provider, removeCookie, setCookie, toast, userData]",{"range":"202","text":"203"},[4175,4177],"[ididea, selectedGame.idea]",[768,770],[3362,3364],[3285,3295],"[initGameDispatch, userData]",[4097,4099],"[dispatch, provider, removeCookie, setCookie, toast, userData]"]